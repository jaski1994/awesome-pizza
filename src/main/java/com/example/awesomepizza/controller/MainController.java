package com.example.awesomepizza.controller;

import java.sql.Timestamp;
import java.util.List;
import java.util.Date;
import java.util.Collection;
import java.util.stream.Collectors;  

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.web.servlet.error.ErrorController;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
//import org.apache.commons.lang.RandomStringUtils;

import com.example.awesomepizza.model.Orders;
import com.example.awesomepizza.model.Pizza;
import com.example.awesomepizza.model.User;
import com.example.awesomepizza.repository.*;

@Controller // This means that this class is a Controller
@RequestMapping(path="/") // This means URL's start with /demo (after Application path)
public class MainController implements ErrorController{
  // This means to get the bean called userRepository
  // Which is auto-generated by Spring, we will use it to handle the data
  @Autowired        
  private OrdersRepository orderRepository;
  @Autowired 
  private PizzaRepository pizzaRepository;
  @Autowired 
  private UserRepository userRepository;
  private static final String PATH = "/error";


  @PostMapping(path="/pizza") // Map ONLY POST Requests
  public @ResponseBody String addNewPizza (@RequestParam String name, @RequestParam String descrizione) {

    Pizza n = new Pizza();
    n.setName(name);
    n.setDescrizione(descrizione);
    pizzaRepository.save(n);
    return "Saved";
  }

  @PostMapping(path="/user") // Map ONLY POST Requests
  public @ResponseBody String addNewUser (@RequestParam String name, @RequestParam String email) {

    User n = new User();
    n.setName(name);
    n.setEmail(email);
    n.setNotification(false);
    userRepository.save(n);
    return "Saved";
  }

  @PostMapping(path="/order") // Map ONLY POST Requests
  public @ResponseBody String addNewOrder (@RequestParam String name, @RequestParam String user) {
	
    String tokenTag = Utils.getAlphaNumericString(5);// fx-lat
    Date datenow = new Date();
    /*for (  String x : descrizione) { array
      Orders n = new Orders();
      n.setTag(tokenTag);
      n.setPizza(pizzaRepository.findByName(x).get(0));
      n.setInsertDate(new Timestamp(datenow.getTime()));
      orderRepository.save(n);
    }*/

    Orders n = new Orders();
    n.setTag(tokenTag);
    n.setPizza(pizzaRepository.findByName(name).get(0));
    n.setUser(userRepository.findByName(user).get(0));
    n.setInsertDate(new Timestamp(datenow.getTime()));
    n.setCompleted(false);
    n.setMakeingPizza(false);
    orderRepository.save(n);

      
    return tokenTag;
  }
  
  
  @GetMapping(path="/allpizza")
  public @ResponseBody Iterable<Pizza> getAllPizza() {
    return pizzaRepository.findAll();
  }
  
  @GetMapping(path="/allorders")
  public @ResponseBody Iterable<Orders> getAllOrders() {
    return orderRepository.findAll();
  }

  @GetMapping(path="/allusers")
  public @ResponseBody Iterable<User> getAllUsers() {
    return userRepository.findAll();
  }

  @PostMapping(path="/deleteOrder")
  public @ResponseBody String deleteOrder (@RequestParam String tag) {

    for (Orders x : orderRepository.findByTag(tag)) {
      orderRepository.delete(x);
    }
    return "delete";
  }
  

  @PostMapping(path="/make") 
  public @ResponseBody String makePizza () {

    List<Orders> nextPizza = orderRepository.findByOrderByInsertDateAsc().stream().filter(x -> x.getCompleted() == false ).collect(Collectors.toList());
    //List<Orders> nextPizza = orderRepository.findByMakeingPizzaAndCompleted(false, false);
    
    Orders x = nextPizza.get(0);
    x.setMakeingPizza(true);
    orderRepository.save(x);
    
    return "make";
  }
  
  @GetMapping(path="/complete") 
  public @ResponseBody String orderCompleted () {

    Orders x = orderRepository.findByMakeingPizzaAndCompleted(true,false).get(0);
    x.setCompleted(true);
    User userNotif = x.getUser();
    orderRepository.save(x);
    
    userNotif.setNotification(true);
    userRepository.save(userNotif);

    return "complete";
  }

  @PostMapping(path="/notification") 
  public @ResponseBody String removeNotification (@RequestParam String user) {

     User userNotif = userRepository.findByName(user).get(0);
    userNotif.setNotification(false);
    userRepository.save(userNotif);
    return "notification";
  }

}